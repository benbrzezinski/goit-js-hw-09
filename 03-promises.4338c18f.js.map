{"mappings":"gfAAA,IAGIA,EAHJC,EAAAC,EAAA,SAoDA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACLC,KAAKC,SAAW,GAGpCH,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,IAzDZM,SAASC,cAAc,SAgD/BC,iBAAiB,UA7CD,SAAAC,GACnBA,EAAEC,iBAEF,IAEmBC,EAAfF,EAAEG,cADJC,SAAYC,EAAKH,EAALX,MAAOe,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAGrBC,EAAaC,OAAOJ,EAAMK,OAC1BC,EAAYF,OAAOH,EAAKI,OACxBE,EAAcH,OAAOF,EAAOG,OAC9BG,EAAiB,EAErBC,YAAW,WACLF,GAAe,EACjBzB,EAAA4B,OAAOC,QAAQ,kCAIjB3B,EAAcwB,EAAgBL,GAC3BS,MAAK,SAAAC,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MACjBJ,EAAA4B,OAAOI,QAAQ,qBAAoCC,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAE1D8B,OAAM,SAAAH,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MAClBJ,EAAA4B,OAAOC,QAAQ,oBAAmCI,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAG5DL,EAAaoC,aAAY,WACnBT,IAAmBD,EAOvBvB,IAFAwB,EAE8BF,GAC3BM,MAAK,SAAAC,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MACjBJ,EAAA4B,OAAOI,QAAQ,qBAAoCC,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAE1D8B,OAAM,SAAAH,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MAClBJ,EAAA4B,OAAOC,QAAQ,oBAAmCI,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAX1DgC,cAAcrC,E,GAafyB,G,GACFH,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\nlet intervalID;\n\nconst handleSubmit = e => {\n  e.preventDefault();\n\n  const {\n    elements: { delay, step, amount },\n  } = e.currentTarget;\n\n  const delayValue = Number(delay.value);\n  const stepValue = Number(step.value);\n  const amountValue = Number(amount.value);\n  let promiseCounter = 1;\n\n  setTimeout(() => {\n    if (amountValue <= 0) {\n      Notify.failure('Amount must be greater than 0');\n      return;\n    }\n\n    createPromise(promiseCounter, delayValue)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n\n    intervalID = setInterval(() => {\n      if (promiseCounter === amountValue) {\n        clearInterval(intervalID);\n        return;\n      }\n\n      promiseCounter++;\n\n      createPromise(promiseCounter, stepValue)\n        .then(({ position, delay }) => {\n          Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n        });\n    }, stepValue);\n  }, delayValue);\n};\n\nform.addEventListener('submit', handleSubmit);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}\n"],"names":["$ce04d3a99e08e73b$var$intervalID","$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","Math","random","document","querySelector","addEventListener","e","preventDefault","_elements","currentTarget","elements","delay1","step","amount","delayValue","Number","value","stepValue","amountValue","promiseCounter","setTimeout","Notify","failure","then","param","success","concat","catch","setInterval","clearInterval"],"version":3,"file":"03-promises.4338c18f.js.map"}