{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAGA,IAAIC,EAiDJ,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACLC,KAAKC,SAAW,GAGpCH,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,G,CAzDpBM,SAASC,cAAc,SAgD/BC,iBAAiB,UA7CDC,IACnBA,EAAEC,iBAEF,MACEC,UAAYX,MAAAY,EAAKC,KAAEA,EAAIC,OAAEA,IACvBL,EAAEM,cAEAC,EAAaC,OAAOL,EAAMM,OAC1BC,EAAYF,OAAOJ,EAAKK,OACxBE,EAAcH,OAAOH,EAAOI,OAClC,IAAIG,EAAiB,EAErBC,YAAW,KACLF,GAAe,EACjBzB,EAAA4B,OAAOC,QAAQ,kCAIjB1B,EAAcuB,EAAgBL,GAC3BS,MAAK,EAAC1B,SAAEA,EAAQC,MAAEA,MACjBL,EAAA4B,OAAOG,QAAQ,qBAAqB3B,QAAeC,MAAU,IAE9D2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,MAClBL,EAAA4B,OAAOC,QAAQ,oBAAoBzB,QAAeC,MAAU,IAGhEH,EAAa+B,aAAY,KACnBP,IAAmBD,GAKvBC,IAEAvB,EAAcuB,EAAgBF,GAC3BM,MAAK,EAAC1B,SAAEA,EAAQC,MAAEA,MACjBL,EAAA4B,OAAOG,QAAQ,qBAAqB3B,QAAeC,MAAU,IAE9D2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,MAClBL,EAAA4B,OAAOC,QAAQ,oBAAoBzB,QAAeC,MAAU,KAX9D6B,cAAchC,EAYZ,GACHsB,GAAU,GACZH,EAAW","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\nlet intervalID;\n\nconst handleSubmit = e => {\n  e.preventDefault();\n\n  const {\n    elements: { delay, step, amount },\n  } = e.currentTarget;\n\n  const delayValue = Number(delay.value);\n  const stepValue = Number(step.value);\n  const amountValue = Number(amount.value);\n  let promiseCounter = 1;\n\n  setTimeout(() => {\n    if (amountValue <= 0) {\n      Notify.failure('Amount must be greater than 0');\n      return;\n    }\n\n    createPromise(promiseCounter, delayValue)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n\n    intervalID = setInterval(() => {\n      if (promiseCounter === amountValue) {\n        clearInterval(intervalID);\n        return;\n      }\n\n      promiseCounter++;\n\n      createPromise(promiseCounter, stepValue)\n        .then(({ position, delay }) => {\n          Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n        });\n    }, stepValue);\n  }, delayValue);\n};\n\nform.addEventListener('submit', handleSubmit);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$intervalID","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","Math","random","document","querySelector","addEventListener","e","preventDefault","elements","delay1","step","amount","currentTarget","delayValue","Number","value","stepValue","amountValue","promiseCounter","setTimeout","Notify","failure","then","success","catch","setInterval","clearInterval"],"version":3,"file":"03-promises.4a42446a.js.map"}