{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SA+EA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACLC,KAAKC,SAAW,GAGpCH,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,G,CApFpBM,SAASC,cAAc,SA2E/BC,iBAAiB,UAzEMC,IAC1BA,EAAEC,iBAEF,MACEC,UAAYX,MAAAY,EAAKC,KAAEA,EAAIC,OAAEA,IACvBL,EAAEM,cAEAC,EAAaC,OAAOL,EAAMM,OAC1BC,EAAYF,OAAOJ,EAAKK,OACxBE,EAAcH,OAAOH,EAAOI,OAClC,IAAIG,EAAiB,EAEjBD,GAAe,EACjBxB,EAAA0B,OAAOC,QAAQ,gCAAiC,CAC9CxB,SAAU,aACVyB,SAAU,OACVC,cAAc,IAKlBC,YAAW,KACT5B,EAAcuB,EAAgBL,GAC3BW,MAAK,EAAC5B,SAAEA,EAAQC,MAAEA,MACjBJ,EAAA0B,OAAOM,QAAQ,qBAAqB7B,QAAeC,MAAW,CAC5DD,SAAU,aACVyB,SAAU,OACVK,QAAS,KACTJ,cAAc,GACd,IAEHK,OAAM,EAAC/B,SAAEA,EAAQC,MAAEA,MAClBJ,EAAA0B,OAAOC,QAAQ,oBAAoBxB,QAAeC,MAAW,CAC3DD,SAAU,aACVyB,SAAU,OACVK,QAAS,KACTJ,cAAc,GACd,IAGNM,aAAY,KACV,GAAIV,IAAmBD,EACrB,OAGF,MAAMY,EACe,IAAnBX,EACIL,EAAaG,EACbH,EAAaG,EAAYA,GAAaE,EAAiB,GAE7DA,IAEAvB,EAAcuB,EAAgBW,GAC3BL,MAAK,EAAC5B,SAAEA,EAAQC,MAAEA,MACjBJ,EAAA0B,OAAOM,QAAQ,qBAAqB7B,QAAeC,MAAW,CAC5DD,SAAU,aACVyB,SAAU,OACVK,QAAS,KACTJ,cAAc,GACd,IAEHK,OAAM,EAAC/B,SAAEA,EAAQC,MAAEA,MAClBJ,EAAA0B,OAAOC,QAAQ,oBAAoBxB,QAAeC,MAAW,CAC3DD,SAAU,aACVyB,SAAU,OACVK,QAAS,KACTJ,cAAc,GACd,GACF,GACHN,EAAU,GACZH,EAAW","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n\nconst displayPromiseState = e => {\n  e.preventDefault();\n\n  const {\n    elements: { delay, step, amount },\n  } = e.currentTarget;\n\n  const delayValue = Number(delay.value);\n  const stepValue = Number(step.value);\n  const amountValue = Number(amount.value);\n  let promiseCounter = 1;\n\n  if (amountValue <= 0) {\n    Notify.failure('Amount must be greater than 0', {\n      position: 'center-top',\n      distance: '20px',\n      pauseOnHover: false,\n    });\n    return;\n  }\n\n  setTimeout(() => {\n    createPromise(promiseCounter, delayValue)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`, {\n          position: 'center-top',\n          distance: '20px',\n          timeout: 3500,\n          pauseOnHover: false,\n        });\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`, {\n          position: 'center-top',\n          distance: '20px',\n          timeout: 3500,\n          pauseOnHover: false,\n        });\n      });\n\n    setInterval(() => {\n      if (promiseCounter === amountValue) {\n        return;\n      }\n\n      const totalPassedTime =\n        promiseCounter === 1\n          ? delayValue + stepValue\n          : delayValue + stepValue + stepValue * (promiseCounter - 1);\n\n      promiseCounter++;\n\n      createPromise(promiseCounter, totalPassedTime)\n        .then(({ position, delay }) => {\n          Notify.success(`Fulfilled promise ${position} in ${delay}ms`, {\n            position: 'center-top',\n            distance: '20px',\n            timeout: 3500,\n            pauseOnHover: false,\n          });\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`Rejected promise ${position} in ${delay}ms`, {\n            position: 'center-top',\n            distance: '20px',\n            timeout: 3500,\n            pauseOnHover: false,\n          });\n        });\n    }, stepValue);\n  }, delayValue);\n};\n\nform.addEventListener('submit', displayPromiseState);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","Math","random","document","querySelector","addEventListener","e","preventDefault","elements","delay1","step","amount","currentTarget","delayValue","Number","value","stepValue","amountValue","promiseCounter","Notify","failure","distance","pauseOnHover","setTimeout","then","success","timeout","catch","setInterval","totalPassedTime"],"version":3,"file":"03-promises.0a12a3f0.js.map"}