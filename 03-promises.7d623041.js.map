{"mappings":"gfAAA,IAGIA,EAHJC,EAAAC,EAAA,SAiFA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACLC,KAAKC,SAAW,GAGpCH,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,IAtFZM,SAASC,cAAc,SA6E/BC,iBAAiB,UA1ED,SAAAC,GACnBA,EAAEC,iBAEF,IAEmBC,EAAfF,EAAEG,cADJC,SAAYC,EAAKH,EAALX,MAAOe,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAGrBC,EAAaC,OAAOJ,EAAMK,OAC1BC,EAAYF,OAAOH,EAAKI,OACxBE,EAAcH,OAAOF,EAAOG,OAC9BG,EAAiB,EAEjBD,GAAe,EACjBzB,EAAA2B,OAAOC,QAAQ,gCAAiC,CAC9CzB,SAAU,aACV0B,SAAU,OACVC,cAAc,IAKlBC,YAAW,WACT7B,EAAcwB,EAAgBL,GAC3BW,MAAK,SAAAC,G,IAAG9B,EAAQ8B,EAAR9B,SAAUC,EAAK6B,EAAL7B,MACjBJ,EAAA2B,OAAOO,QAAQ,qBAAoCC,OAAfhC,EAAS,QAAYgC,OAAN/B,EAAM,MAAK,CAC5DD,SAAU,aACV0B,SAAU,OACVO,QAAS,IACTN,cAAc,G,IAGjBO,OAAM,SAAAJ,G,IAAG9B,EAAQ8B,EAAR9B,SAAUC,EAAK6B,EAAL7B,MAClBJ,EAAA2B,OAAOC,QAAQ,oBAAmCO,OAAfhC,EAAS,QAAYgC,OAAN/B,EAAM,MAAK,CAC3DD,SAAU,aACV0B,SAAU,OACVO,QAAS,IACTN,cAAc,G,IAIpB/B,EAAauC,aAAY,WACvB,GAAIZ,IAAmBD,EAAvB,CAKA,IAAMc,EACe,IAAnBb,EACIL,EAAaG,EACbH,EAAaG,EAAYA,GAAaE,EAAiB,GAI7DxB,IAFAwB,EAE8Ba,GAC3BP,MAAK,SAAAC,G,IAAG9B,EAAQ8B,EAAR9B,SAAUC,EAAK6B,EAAL7B,MACjBJ,EAAA2B,OAAOO,QAAQ,qBAAoCC,OAAfhC,EAAS,QAAYgC,OAAN/B,EAAM,MAAK,CAC5DD,SAAU,aACV0B,SAAU,OACVO,QAAS,IACTN,cAAc,G,IAGjBO,OAAM,SAAAJ,G,IAAG9B,EAAQ8B,EAAR9B,SAAUC,EAAK6B,EAAL7B,MAClBJ,EAAA2B,OAAOC,QAAQ,oBAAmCO,OAAfhC,EAAS,QAAYgC,OAAN/B,EAAM,MAAK,CAC3DD,SAAU,aACV0B,SAAU,OACVO,QAAS,IACTN,cAAc,G,SAzBlBU,cAAczC,E,GA4BfyB,E,GACFH,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\nlet intervalID;\n\nconst handleSubmit = e => {\n  e.preventDefault();\n\n  const {\n    elements: { delay, step, amount },\n  } = e.currentTarget;\n\n  const delayValue = Number(delay.value);\n  const stepValue = Number(step.value);\n  const amountValue = Number(amount.value);\n  let promiseCounter = 1;\n\n  if (amountValue <= 0) {\n    Notify.failure('Amount must be greater than 0', {\n      position: 'center-top',\n      distance: '20px',\n      pauseOnHover: false,\n    });\n    return;\n  }\n\n  setTimeout(() => {\n    createPromise(promiseCounter, delayValue)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`, {\n          position: 'center-top',\n          distance: '20px',\n          timeout: 4000,\n          pauseOnHover: false,\n        });\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`, {\n          position: 'center-top',\n          distance: '20px',\n          timeout: 4000,\n          pauseOnHover: false,\n        });\n      });\n\n    intervalID = setInterval(() => {\n      if (promiseCounter === amountValue) {\n        clearInterval(intervalID);\n        return;\n      }\n\n      const totalPassedTime =\n        promiseCounter === 1\n          ? delayValue + stepValue\n          : delayValue + stepValue + stepValue * (promiseCounter - 1);\n\n      promiseCounter++;\n\n      createPromise(promiseCounter, totalPassedTime)\n        .then(({ position, delay }) => {\n          Notify.success(`Fulfilled promise ${position} in ${delay}ms`, {\n            position: 'center-top',\n            distance: '20px',\n            timeout: 4000,\n            pauseOnHover: false,\n          });\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`Rejected promise ${position} in ${delay}ms`, {\n            position: 'center-top',\n            distance: '20px',\n            timeout: 4000,\n            pauseOnHover: false,\n          });\n        });\n    }, stepValue);\n  }, delayValue);\n};\n\nform.addEventListener('submit', handleSubmit);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}\n"],"names":["$ce04d3a99e08e73b$var$intervalID","$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","Math","random","document","querySelector","addEventListener","e","preventDefault","_elements","currentTarget","elements","delay1","step","amount","delayValue","Number","value","stepValue","amountValue","promiseCounter","Notify","failure","distance","pauseOnHover","setTimeout","then","param","success","concat","timeout","catch","setInterval","totalPassedTime","clearInterval"],"version":3,"file":"03-promises.7d623041.js.map"}