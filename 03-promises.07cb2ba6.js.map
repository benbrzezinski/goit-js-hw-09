{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAgB,CACpBC,SAAU,aACVC,SAAU,OACVC,QAAS,KACTC,cAAc,GAmDhB,SAASC,EAAcJ,EAAUK,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEP,E,MAAUK,IAEpBG,EAAO,C,SAAER,E,MAAUK,GAAQ,GAE5BA,EAAM,G,CAZbT,EAAKiB,iBAAiB,UA9CMC,IAC1BA,EAAEC,iBAEF,MACEC,UAAYX,MAAAY,EAAKC,KAAEA,EAAIC,OAAEA,IACvBL,EAAEM,cAEAC,EAAYC,OAAOJ,EAAKK,OACxBC,EAAcF,OAAOH,EAAOI,OAClC,IAAIE,EAAaH,OAAOL,EAAMM,OAE9B,GAAIC,GAAe,EACjB9B,EAAAgC,OAAOC,QAAQ,gCAAiC,IAC3C5B,EACHG,QAAS,WAKb,GAAIuB,EAAa,GAAKJ,EAAY,EAChC3B,EAAAgC,OAAOC,QAAQ,oCAAqC,IAC/C5B,EACHG,QAAS,WAKb,IAAK,IAAI0B,EAAI,EAAGA,GAAKJ,EAAaI,IAChCxB,EAAcwB,EAAGH,GACdI,MAAK,EAAC7B,SAAEA,EAAQK,MAAEA,MACjBX,EAAAgC,OAAOI,QACL,qBAAqB9B,QAAeK,MACpCN,EACD,IAEFgC,OAAM,EAAC/B,SAAEA,EAAQK,MAAEA,MAClBX,EAAAgC,OAAOC,QACL,oBAAoB3B,QAAeK,MACnCN,EACD,IAGL0B,GAAcJ,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\nconst notifyOptions = {\n  position: 'center-top',\n  distance: '20px',\n  timeout: 3500,\n  pauseOnHover: false,\n};\n\nconst displayPromiseState = e => {\n  e.preventDefault();\n\n  const {\n    elements: { delay, step, amount },\n  } = e.currentTarget;\n\n  const stepValue = Number(step.value);\n  const amountValue = Number(amount.value);\n  let delayValue = Number(delay.value);\n\n  if (amountValue <= 0) {\n    Notify.failure('Amount must be greater than 0', {\n      ...notifyOptions,\n      timeout: 3000,\n    });\n    return;\n  }\n\n  if (delayValue < 0 || stepValue < 0) {\n    Notify.failure('Delay cannot be a negative number', {\n      ...notifyOptions,\n      timeout: 3000,\n    });\n    return;\n  }\n\n  for (let i = 1; i <= amountValue; i++) {\n    createPromise(i, delayValue)\n      .then(({ position, delay }) => {\n        Notify.success(\n          `Fulfilled promise ${position} in ${delay}ms`,\n          notifyOptions\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(\n          `Rejected promise ${position} in ${delay}ms`,\n          notifyOptions\n        );\n      });\n\n    delayValue += stepValue;\n  }\n};\n\nform.addEventListener('submit', displayPromiseState);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$notifyOptions","position","distance","timeout","pauseOnHover","$47d4ff9957288465$var$createPromise","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","elements","delay1","step","amount","currentTarget","stepValue","Number","value","amountValue","delayValue","Notify","failure","i","then","success","catch"],"version":3,"file":"03-promises.07cb2ba6.js.map"}