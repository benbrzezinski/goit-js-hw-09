{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAgB,CACpBC,SAAU,aACVC,SAAU,OACVC,QAAS,KACTC,cAAc,GAkEhB,SAASC,EAAcJ,EAAUK,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACLC,KAAKC,SAAW,GAGpCH,EAAQ,C,SAAEP,E,MAAUK,IAEpBG,EAAO,C,SAAER,E,MAAUK,GAAQ,G,CATjCT,EAAKe,iBAAiB,UA7DMC,IAC1BA,EAAEC,iBAEF,MACEC,UAAYT,MAAAU,EAAKC,KAAEA,EAAIC,OAAEA,IACvBL,EAAEM,cAEAC,EAAYC,OAAOJ,EAAKK,OACxBC,EAAcF,OAAOH,EAAOI,OAClC,IAAIE,EAAaH,OAAOL,EAAMM,OAC1BG,EAAiB,EAEjBF,GAAe,EACjB5B,EAAA+B,OAAOC,QAAQ,gCAAiC,IAC3C3B,EACHG,QAAS,MAKbyB,YAAW,KACTvB,EAAcoB,EAAgBD,GAC3BK,MAAK,EAAC5B,SAAEA,EAAQK,MAAEA,MACjBX,EAAA+B,OAAOI,QACL,qBAAqB7B,QAAeK,MACpCN,EACD,IAEF+B,OAAM,EAAC9B,SAAEA,EAAQK,MAAEA,MAClBX,EAAA+B,OAAOC,QACL,oBAAoB1B,QAAeK,MACnCN,EACD,IAGLgC,aAAY,KACV,GAAIP,IAAmBF,EACrB,OAGF,MAAMU,EAAmBT,GAAcJ,EAEvCK,IAEApB,EAAcoB,EAAgBQ,GAC3BJ,MAAK,EAAC5B,SAAEA,EAAQK,MAAEA,MACjBX,EAAA+B,OAAOI,QACL,qBAAqB7B,QAAeK,MACpCN,EACD,IAEF+B,OAAM,EAAC9B,SAAEA,EAAQK,MAAEA,MAClBX,EAAA+B,OAAOC,QACL,oBAAoB1B,QAAeK,MACnCN,EACD,GACD,GACHoB,EAAU,GACZI,EAAW","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\nconst notifyOptions = {\n  position: 'center-top',\n  distance: '20px',\n  timeout: 3500,\n  pauseOnHover: false,\n};\n\nconst displayPromiseState = e => {\n  e.preventDefault();\n\n  const {\n    elements: { delay, step, amount },\n  } = e.currentTarget;\n\n  const stepValue = Number(step.value);\n  const amountValue = Number(amount.value);\n  let delayValue = Number(delay.value);\n  let promiseCounter = 1;\n\n  if (amountValue <= 0) {\n    Notify.failure('Amount must be greater than 0', {\n      ...notifyOptions,\n      timeout: 3000,\n    });\n    return;\n  }\n\n  setTimeout(() => {\n    createPromise(promiseCounter, delayValue)\n      .then(({ position, delay }) => {\n        Notify.success(\n          `Fulfilled promise ${position} in ${delay}ms`,\n          notifyOptions\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(\n          `Rejected promise ${position} in ${delay}ms`,\n          notifyOptions\n        );\n      });\n\n    setInterval(() => {\n      if (promiseCounter === amountValue) {\n        return;\n      }\n\n      const totalPassedTime = (delayValue += stepValue);\n\n      promiseCounter++;\n\n      createPromise(promiseCounter, totalPassedTime)\n        .then(({ position, delay }) => {\n          Notify.success(\n            `Fulfilled promise ${position} in ${delay}ms`,\n            notifyOptions\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(\n            `Rejected promise ${position} in ${delay}ms`,\n            notifyOptions\n          );\n        });\n    }, stepValue);\n  }, delayValue);\n};\n\nform.addEventListener('submit', displayPromiseState);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$notifyOptions","position","distance","timeout","pauseOnHover","$47d4ff9957288465$var$createPromise","delay","Promise","resolve","reject","Math","random","addEventListener","e","preventDefault","elements","delay1","step","amount","currentTarget","stepValue","Number","value","amountValue","delayValue","promiseCounter","Notify","failure","setTimeout","then","success","catch","setInterval","totalPassedTime"],"version":3,"file":"03-promises.476172ef.js.map"}